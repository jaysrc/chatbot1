{"ast":null,"code":"var _jsxFileName = \"/home/jay/office/chatapp/src/App.js\";\nimport React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChange = event => {\n      this.setState({\n        userMessage: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      if (!this.state.userMessage.trim()) return;\n      const msg = {\n        text: this.state.userMessage,\n        user: 'human'\n      };\n      console.log(msg);\n      this.setState({\n        conversation: [...this.state.conversation, msg]\n      });\n      fetch('http://localhost:4000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: this.state.userMessage\n        })\n      });\n      this.setState({\n        userMessage: ''\n      });\n    };\n\n    this.state = {\n      userMessage: '',\n      conversation: []\n    };\n  }\n\n  componentDidMount() {\n    const pusher = new Pusher('73cc4fbfb90ab18d2378', {\n      cluster: 'ap2',\n      encrypted: true\n    });\n    const channel = pusher.subscribe('bot');\n    channel.bind('bot-response', data => {\n      const msg = {\n        text: data.message,\n        user: 'ai'\n      };\n      this.setState({\n        conversation: [...this.state.conversation, msg]\n      });\n    });\n  }\n\n  render() {\n    const ChatBubble = (text, i, className) => {\n      return React.createElement(\"div\", {\n        key: \"\".concat(className, \"-\").concat(i),\n        className: \"\".concat(className, \" chat-bubble\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"chat-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, text));\n    };\n\n    const chat = this.state.conversation.map((e, index) => ChatBubble(e.text, index, e.user));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"React Chatbot\"), React.createElement(\"div\", {\n      className: \"chat-window\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"conversation-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, chat), React.createElement(\"div\", {\n      className: \"message-box\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      value: this.state.userMessage,\n      onChange: this.handleChange,\n      className: \"text-input\",\n      type: \"text\",\n      autoFocus: true,\n      placeholder: \"Type your message and hit Enter to send\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/jay/office/chatapp/src/App.js"],"names":["React","Component","Pusher","App","constructor","props","handleChange","event","setState","userMessage","target","value","handleSubmit","preventDefault","state","trim","msg","text","user","console","log","conversation","fetch","method","headers","body","JSON","stringify","message","componentDidMount","pusher","cluster","encrypted","channel","subscribe","bind","data","render","ChatBubble","i","className","chat","map","e","index"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userMessage: '',\n      conversation: [],\n    };\n  }\n\n  componentDidMount() {\n    const pusher = new Pusher('73cc4fbfb90ab18d2378', {\n      cluster: 'ap2',\n      encrypted: true,\n    });\n\n    const channel = pusher.subscribe('bot');\n    channel.bind('bot-response', data => {\n      const msg = {\n        text: data.message,\n        user: 'ai',\n      };\n      this.setState({\n        conversation: [...this.state.conversation, msg],\n      });\n    });\n  }\n\n  handleChange = event => {\n    this.setState({ userMessage: event.target.value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    if (!this.state.userMessage.trim()) return;\n\n    const msg = {\n      text: this.state.userMessage,\n      user: 'human',\n    }; console.log(msg)\n\n    this.setState({\n      conversation: [...this.state.conversation, msg],\n    });\n\n    fetch('http://localhost:4000/chat', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        message: this.state.userMessage,\n      })\n    });\n\n    this.setState({ userMessage: '' });\n  };\n\n  render() {\n    const ChatBubble = (text, i, className) => {\n      return (\n        <div key={`${className}-${i}`} className={`${className} chat-bubble`}>\n          <span className=\"chat-content\">{text}</span>\n        </div>\n      );\n    };\n\n    const chat = this.state.conversation.map((e, index) =>\n      ChatBubble(e.text, index, e.user)\n    );\n\n    return (\n      <div>\n        <h1>React Chatbot</h1>\n        <div className=\"chat-window\">\n          <div className=\"conversation-view\">{chat}</div>\n          <div className=\"message-box\">\n            <form onSubmit={this.handleSubmit}>\n              <input\n                value={this.state.userMessage}\n                onChange={this.handleChange}\n                className=\"text-input\"\n                type=\"text\"\n                autoFocus\n                placeholder=\"Type your message and hit Enter to send\"\n              />\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}